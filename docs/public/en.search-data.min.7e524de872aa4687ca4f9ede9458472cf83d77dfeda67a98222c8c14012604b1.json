[{"id":0,"href":"/docs/docs/","title":"Documentation","section":"NewsFeed Documentation","content":" NewsFeed Documentation # Welcome to the comprehensive documentation for NewsFeed. Use the navigation menu to explore different sections.\nDocumentation Sections # User Guides # Frontend Usage Guide - Learn how to use the NewsFeed interface Admin Dashboard Guide - Manage and configure your NewsFeed instance Technical Documentation # Backend API Documentation - Explore the API endpoints Worker Tasks - Learn about background processing Authentication - Understanding the authentication system Deployment # Deployment Guides - Deploy NewsFeed on various platforms Platform-Specific Guides - Instructions for specific platforms "},{"id":1,"href":"/docs/docs/frontend/","title":"Frontend Usage Guide","section":"Documentation","content":" Frontend Usage Guide # This section provides detailed information on how to use the NewsFeed frontend interface.\nNavigation # The NewsFeed interface consists of several key areas:\nMain Navigation Bar - Access different sections of the application News Feed - Browse through aggregated news articles Article View - Read individual articles Source Filters - Filter content by sources Category Filters - Filter content by categories Features # News Feed # The News Feed displays a collection of articles from various sources. Each article card shows:\nArticle title Source name Publication date Brief description Thumbnail image (if available) Click on any article card to read the full content.\nArticle Search # Use the search bar at the top of the page to find specific articles:\nClick on the search icon or press Ctrl+K (or Cmd+K on Mac) Enter your search query Press Enter or click the search button Browse through the search results Filtering Content # Filter content by:\nCategories - Click on a category tag to view articles in that category Sources - Select specific news sources from the sources menu Date Range - Filter articles by publication date User Preferences # Customize your news feed by setting preferences:\nLog in to your account Navigate to the user settings Set your preferred categories and sources Save your preferences Your news feed will be personalized based on these preferences.\nMobile Usage # The NewsFeed interface is fully responsive and works on mobile devices:\nSwipe left/right to navigate between sections Tap article cards to open them Use the hamburger menu to access navigation options "},{"id":2,"href":"/docs/docs/admin/","title":"Admin Dashboard Guide","section":"Documentation","content":" Admin Dashboard Guide # This section provides detailed information on how to use the NewsFeed admin dashboard to manage and configure your NewsFeed instance.\nAccessing the Admin Dashboard # To access the admin dashboard:\nLog in with an administrator account Click on the \u0026ldquo;Admin\u0026rdquo; link in the navigation bar You will be redirected to the admin dashboard Dashboard Overview # The admin dashboard provides several sections:\nOverview - System status and statistics Categories - Manage content categories Sources - Manage news sources Related Articles - Configure related article settings Settings - System-wide configuration Rebuild - Trigger system rebuilds and updates Managing Categories # The Categories section allows you to:\nView all existing categories Create new categories Edit category names and descriptions Delete categories Merge categories Adding a New Category # Navigate to the Categories section Click \u0026ldquo;Add New Category\u0026rdquo; Enter a name and description Click \u0026ldquo;Save\u0026rdquo; Editing Categories # Find the category in the list Click the \u0026ldquo;Edit\u0026rdquo; button Make your changes Click \u0026ldquo;Save\u0026rdquo; Managing Sources # The Sources section allows you to:\nView all configured news sources Add new sources Edit source details Enable/disable sources Delete sources Adding a New Source # Navigate to the Sources section Click \u0026ldquo;Add New Source\u0026rdquo; Enter the source details: Name URL Feed URL Category (optional) Click \u0026ldquo;Save\u0026rdquo; Related Articles # Configure how related articles are determined:\nSimilarity threshold Maximum number of related articles Algorithms used for determining relatedness System Settings # The Settings section allows you to configure:\nCache duration Default article display count Worker task frequency Authentication settings API rate limits Rebuilding the System # The Rebuild section provides tools to:\nRebuild the article index Clear caches Reprocess articles Update category assignments This is useful after making significant changes to categories or sources.\n"},{"id":3,"href":"/docs/docs/backend/","title":"Backend API Documentation","section":"Documentation","content":" Backend API Documentation # This section provides detailed information about the NewsFeed backend API endpoints.\nAPI Overview # The NewsFeed API is built using FastAPI and follows RESTful principles. All API endpoints are prefixed with /api.\nAuthentication # Most API endpoints require authentication. The API uses Casdoor for authentication and authorization.\nTo authenticate:\nObtain an access token from the Casdoor authentication endpoint Include the token in the Authorization header of your requests: Authorization: Bearer \u0026lt;your_token\u0026gt; API Endpoints # Articles # Endpoint Method Description /api/articles GET List articles with pagination /api/articles/{id} GET Get article by ID /api/articles/search GET Search articles /api/articles/latest GET Get latest articles /api/articles/popular GET Get popular articles List Articles # GET /api/articles Query parameters:\npage: Page number (default: 1) limit: Items per page (default: 20) category: Filter by category source: Filter by source from_date: Filter by date (format: YYYY-MM-DD) to_date: Filter by date (format: YYYY-MM-DD) Categories # Endpoint Method Description /api/categories GET List all categories /api/categories POST Create a new category (admin only) /api/categories/{id} GET Get category by ID /api/categories/{id} PUT Update a category (admin only) /api/categories/{id} DELETE Delete a category (admin only) /api/categories/{id}/articles GET Get articles in a category Sources # Endpoint Method Description /api/sources GET List all sources /api/sources POST Add a new source (admin only) /api/sources/{id} GET Get source by ID /api/sources/{id} PUT Update a source (admin only) /api/sources/{id} DELETE Delete a source (admin only) /api/sources/{id}/articles GET Get articles from a source Related Articles # Endpoint Method Description /api/related/{article_id} GET Get related articles /api/related POST Create related article connection (admin only) /api/related/{id} DELETE Delete related article connection (admin only) Thumbnails # Endpoint Method Description /api/thumbnails/{article_id} GET Get article thumbnail Admin # Endpoint Method Description /api/admin/rebuild POST Trigger system rebuild (admin only) /api/admin/settings GET Get system settings (admin only) /api/admin/settings PUT Update system settings (admin only) Response Format # All API responses follow a standard format:\n{ \u0026#34;status\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;data\u0026#34;: { // Response data here }, \u0026#34;message\u0026#34;: \u0026#34;Optional message\u0026#34; } For error responses:\n{ \u0026#34;status\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;ERROR_CODE\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Error message\u0026#34; } } Rate Limiting # The API implements rate limiting to prevent abuse. Limits are:\n100 requests per minute for authenticated users 20 requests per minute for unauthenticated users When rate limited, the API will return a 429 status code.\n"},{"id":4,"href":"/docs/docs/worker/","title":"Worker Tasks","section":"Documentation","content":" Worker Tasks # This section provides detailed information about the background worker tasks in NewsFeed.\nOverview # NewsFeed uses Celery for background task processing. These tasks handle resource-intensive operations such as:\nFetching articles from FreshRSS Processing article content Generating thumbnails Categorizing articles Finding related articles Purging old articles Task Architecture # The worker system consists of:\nCelery Workers - Process tasks from the queue Redis - Message broker and result backend Beat Scheduler - Schedules periodic tasks Main Tasks # Fetch Articles from FreshRSS # Task name: fetch_freshrss_articles\nThis task:\nConnects to the FreshRSS API Retrieves new articles since the last fetch Stores articles in the database Triggers processing tasks for each new article Schedule: Runs every 15 minutes by default\nConfiguration:\nWORKER_FRESHRSS_FETCH_LIMIT: Maximum number of articles to fetch (default: 100) WORKER_CONCURRENT_FRESHRSS_FETCH_TASKS: Number of concurrent fetch tasks (default: 1) WORKER_FRESHRSS_FETCH_DAYS: Number of days to look back for articles (default: 3) Process Article Content # Task name: process_article_content\nThis task:\nExtracts the main content from the article HTML Generates a summary using AI Creates a thumbnail from the article\u0026rsquo;s main image Analyzes the content for categorization Triggered by: fetch_freshrss_articles task\nGenerate Thumbnails # Task name: generate_thumbnail\nThis task:\nExtracts images from the article Selects the best image for a thumbnail Resizes and optimizes the image Saves the thumbnail to the filesystem Triggered by: process_article_content task\nCategorize Articles # Task name: categorize_article\nThis task:\nAnalyzes article content using AI Assigns categories based on content analysis Updates the article\u0026rsquo;s category associations Configuration:\nOLLAMA_URL: URL of the Ollama server OLLAMA_MODEL: AI model to use for categorization Triggered by: process_article_content task\nFind Related Articles # Task name: find_related_articles\nThis task:\nAnalyzes the article content Compares it with other articles in the database Establishes relationships between similar articles Schedule: Runs daily\nPurge Old Articles # Task name: purge_old_articles\nThis task:\nIdentifies articles older than the configured retention period Removes them from the database Deletes associated thumbnails Schedule: Runs daily\nConfiguration:\nWORKER_FRESHRSS_PURGE_NUM_DAYS_TO_KEEP: Number of days to keep articles (default: 7) Monitoring Worker Tasks # You can monitor worker tasks through:\nCelery logs Redis monitoring tools Database queries for task status Troubleshooting # Common issues and solutions:\nTask Queue Buildup # Symptoms: Tasks are queuing up but not being processed\nSolutions:\nIncrease the number of worker processes Check for errors in worker logs Verify Redis connection Memory Usage Issues # Symptoms: Workers consuming excessive memory\nSolutions:\nSet memory limits for workers Implement task timeouts Split large tasks into smaller chunks Failed Tasks # Symptoms: Tasks consistently failing\nSolutions:\nCheck worker logs for errors Verify external service connections (FreshRSS, Ollama) Test tasks manually using the Celery command line "},{"id":5,"href":"/docs/docs/authentication/","title":"Authentication","section":"Documentation","content":" Authentication # This section provides detailed information about the authentication system in NewsFeed.\nOverview # NewsFeed uses Casdoor for authentication and user management. Casdoor is an open-source Identity and Access Management (IAM) solution that provides:\nUser authentication Single Sign-On (SSO) OAuth 2.0 support User management Role-based access control Authentication Flow # The authentication flow in NewsFeed works as follows:\nUser clicks \u0026ldquo;Login\u0026rdquo; in the NewsFeed interface User is redirected to the Casdoor login page After successful authentication, Casdoor redirects back to NewsFeed with an authorization code NewsFeed exchanges the code for an access token The access token is stored in the browser and used for subsequent API requests Backend Authentication # The backend authenticates API requests using:\nJWT token validation Public key verification Role-based access control JWT Verification # The backend verifies JWT tokens by:\nExtracting the token from the Authorization header Verifying the token signature using Casdoor\u0026rsquo;s public key Validating token claims (expiration, issuer, etc.) Extracting user information from the token Configuration # Casdoor Configuration # Casdoor is configured through environment variables:\n# Casdoor Configuration CASDOOR_ENDPOINT=http://casdoor:8000 CASDOOR_CLIENT_ID=your-client-id CASDOOR_CLIENT_SECRET=your-client-secret CASDOOR_ORG=newsfeed CASDOOR_APP_NAME=newsfeed CASDOOR_CERT_PUBLIC_KEY=\u0026#34;-----BEGIN PUBLIC KEY----- ... -----END PUBLIC KEY-----\u0026#34; Frontend Configuration # The frontend is configured through environment variables:\n# Casdoor configuration NEXT_PUBLIC_CASDOOR_SERVER_URL=http://localhost:8000 NEXT_PUBLIC_CASDOOR_CLIENT_ID=your-client-id NEXT_PUBLIC_CASDOOR_CLIENT_SECRET=your-client-secret NEXT_PUBLIC_CASDOOR_APP_NAME=newsfeed NEXT_PUBLIC_CASDOOR_ORG_NAME=newsfeed NEXT_PUBLIC_CASDOOR_REDIRECT_URI=http://localhost:8880/callback User Roles # NewsFeed supports the following user roles:\nAnonymous - Unauthenticated users with limited access User - Standard authenticated users Admin - Users with administrative privileges Role-Based Access # Different API endpoints have different access requirements:\nPublic endpoints (no authentication required) User endpoints (authentication required) Admin endpoints (admin role required) Custom Authentication # If you need to use a different authentication system:\nModify the auth.py file in the backend Update the AuthContext.tsx file in the frontend Configure your authentication provider Update the authentication flow Troubleshooting # Common authentication issues:\nInvalid Token # Symptoms: API requests fail with 401 Unauthorized\nSolutions:\nCheck that the token is being sent correctly Verify token expiration Ensure the public key is configured correctly CORS Issues # Symptoms: Authentication fails due to CORS errors\nSolutions:\nConfigure CORS settings in the backend Ensure the redirect URI is configured correctly Check browser console for specific CORS errors Casdoor Connection Issues # Symptoms: Unable to connect to Casdoor\nSolutions:\nVerify Casdoor is running Check network connectivity between services Validate Casdoor configuration "},{"id":6,"href":"/docs/docs/deployment/","title":"Deployment Guides","section":"Documentation","content":" Deployment Guides # This section provides detailed information on deploying NewsFeed in various environments.\nDocker Deployment # NewsFeed is designed to be deployed using Docker and Docker Compose. The project includes a production-ready docker-compose.yml file.\nPrerequisites # Docker Engine (20.10+) Docker Compose (2.0+) At least 2GB of RAM At least 10GB of disk space Basic Deployment Steps # Clone the repository:\ngit clone https://github.com/beardedtek/newsfeed.git cd newsfeed Set up environment variables:\n# Create environment files from examples cp env/frontend.example env/frontend cp env/backend.example env/backend # Edit the environment files with your configuration nano env/frontend nano env/backend Create Docker networks:\ndocker network create newsfeed docker network create casdoor Start the services:\ndocker-compose up -d Monitor the logs:\ndocker-compose logs -f Production Considerations # For production deployments, consider the following:\nSecurity:\nUse strong passwords for all services Configure SSL/TLS for all external access Restrict access to admin endpoints Performance:\nAdjust worker concurrency based on available resources Configure appropriate cache settings Consider using a CDN for static assets Reliability:\nSet up monitoring and alerting Configure regular backups Implement health checks Reverse Proxy Configuration # NewsFeed is designed to be deployed behind a reverse proxy. The following sections provide configuration examples for popular reverse proxies.\nNginx # server { listen 80; server_name newsfeed.example.com; # Redirect HTTP to HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name newsfeed.example.com; # SSL configuration ssl_certificate /path/to/fullchain.pem; ssl_certificate_key /path/to/privkey.pem; ssl_protocols TLSv1.2 TLSv1.3; # Proxy to NewsFeed location / { proxy_pass http://localhost:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # Documentation location /docs/ { proxy_pass http://localhost:80/docs/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } Traefik # # docker-compose.override.yml services: nginx: labels: - \u0026#34;traefik.enable=true\u0026#34; - \u0026#34;traefik.http.routers.newsfeed.rule=Host(`newsfeed.example.com`)\u0026#34; - \u0026#34;traefik.http.routers.newsfeed.entrypoints=websecure\u0026#34; - \u0026#34;traefik.http.routers.newsfeed.tls.certresolver=myresolver\u0026#34; - \u0026#34;traefik.http.services.newsfeed.loadbalancer.server.port=80\u0026#34; Caddy # newsfeed.example.com { reverse_proxy /* localhost:80 } Scaling # For larger deployments, consider:\nHorizontal Scaling:\nAdd more worker containers Use a load balancer for frontend/backend services Database Scaling:\nConfigure PostgreSQL replication Consider using a managed database service Cache Optimization:\nIncrease Redis memory allocation Implement distributed caching Backup and Recovery # To back up your NewsFeed instance:\nDatabase Backup:\ndocker-compose exec db pg_dump -U postgres -d newsfeed \u0026gt; backup.sql Volume Backup:\n# Backup thumbnails tar -czvf thumbnails-backup.tar.gz /path/to/thumbnails/volume Configuration Backup:\n# Backup environment files cp -r env/ env-backup/ To restore from backup:\nDatabase Restore:\ncat backup.sql | docker-compose exec -T db psql -U postgres -d newsfeed Volume Restore:\n# Restore thumbnails tar -xzvf thumbnails-backup.tar.gz -C /path/to/restore/location Upgrading # To upgrade your NewsFeed instance:\nPull the latest changes:\ngit pull Rebuild and restart the services:\ndocker-compose down docker-compose build docker-compose up -d Run any necessary migrations:\ndocker-compose exec backend python -m app.init_db "},{"id":7,"href":"/docs/docs/platforms/","title":"Platform-Specific Guides","section":"Documentation","content":" Platform-Specific Guides # This section provides detailed information on deploying NewsFeed on specific platforms.\nWindows # Prerequisites # Windows 10/11 with WSL2 enabled Docker Desktop for Windows Git for Windows Installation Steps # Install WSL2:\nOpen PowerShell as Administrator Run: wsl --install Restart your computer Install Docker Desktop:\nDownload from Docker Desktop During installation, ensure WSL2 integration is enabled Clone the Repository:\n# Using PowerShell git clone https://github.com/beardedtek/newsfeed.git cd newsfeed Configure Environment:\nCopy example environment files: copy env\\frontend.example env\\frontend copy env\\backend.example env\\backend Edit the files with your preferred text editor Create Docker Networks:\ndocker network create newsfeed docker network create casdoor Start the Services:\ndocker-compose up -d Access NewsFeed:\nOpen a browser and navigate to http://localhost:80 Windows-Specific Considerations # File Permissions: WSL2 and Windows handle file permissions differently. If you encounter permission issues, check the file ownership and permissions in WSL. Performance: For better performance, store the project files in the WSL2 filesystem rather than the Windows filesystem. Resource Allocation: Adjust Docker Desktop resource allocation (memory, CPU) in the settings if needed. Proxmox # Prerequisites # Proxmox VE 7.0+ LXC container or VM with Docker support At least 2GB RAM and 2 CPU cores Installation Steps # Create an LXC Container or VM:\nFor LXC: Use a Ubuntu 22.04 template with nesting enabled For VM: Install Ubuntu 22.04 Server Install Docker and Docker Compose:\n# Update system apt update \u0026amp;\u0026amp; apt upgrade -y # Install dependencies apt install -y apt-transport-https ca-certificates curl software-properties-common # Add Docker repository curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; # Install Docker apt update apt install -y docker-ce docker-compose Clone the Repository:\ngit clone https://github.com/beardedtek/newsfeed.git cd newsfeed Configure Environment:\ncp env/frontend.example env/frontend cp env/backend.example env/backend # Edit the files nano env/frontend nano env/backend Create Docker Networks:\ndocker network create newsfeed docker network create casdoor Start the Services:\ndocker-compose up -d Proxmox-Specific Considerations # Resource Allocation: Adjust CPU and memory resources in Proxmox as needed. Storage: Consider using a dedicated storage volume for the database and thumbnails. Networking: Configure appropriate network settings in Proxmox for external access. Unraid # Prerequisites # Unraid 6.9+ Docker support enabled Community Applications (CA) installed Installation Steps # Install Docker:\nEnsure Docker is enabled in Unraid settings Create App Folder:\nCreate a folder for NewsFeed in your appdata share: mkdir -p /mnt/user/appdata/newsfeed Clone the Repository:\ncd /mnt/user/appdata/newsfeed git clone https://github.com/beardedtek/newsfeed.git . Configure Environment:\ncp env/frontend.example env/frontend cp env/backend.example env/backend # Edit the files nano env/frontend nano env/backend Create Docker Networks:\ndocker network create newsfeed docker network create casdoor Start the Services:\ndocker-compose up -d Add to Unraid Startup:\nCreate a user script in Unraid to start NewsFeed on system boot Unraid-Specific Considerations # Persistence: Store data on the array, not on the cache drive, for better data protection. Backup: Use Unraid\u0026rsquo;s built-in backup solutions for the NewsFeed data. Monitoring: Use Unraid\u0026rsquo;s Docker monitoring features to keep track of container health. QNAP # Prerequisites # QNAP NAS with Container Station installed At least 2GB of RAM available for containers Installation Steps # Install Container Station:\nOpen the App Center Find and install Container Station Enable SSH:\nOpen Control Panel \u0026gt; Network \u0026amp; File Services \u0026gt; Telnet/SSH Enable SSH and set a port SSH into QNAP:\nssh admin@qnap-ip-address Install Docker Compose:\ncurl -L \u0026#34;https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose Create Project Directory:\nmkdir -p /share/Container/newsfeed cd /share/Container/newsfeed Clone the Repository:\ngit clone https://github.com/beardedtek/newsfeed.git . Configure Environment:\ncp env/frontend.example env/frontend cp env/backend.example env/backend # Edit the files nano env/frontend nano env/backend Create Docker Networks:\ndocker network create newsfeed docker network create casdoor Start the Services:\ndocker-compose up -d QNAP-Specific Considerations # Resource Limitations: QNAP NAS devices may have limited resources. Monitor container performance. Persistence: Store data on a volume that is included in your backup routine. Network Configuration: Configure port forwarding in QNAP\u0026rsquo;s network settings if you want to access NewsFeed from outside your network. "}]