name: Build and Publish Docker Images

on:
  push:
    branches: [ "main", "dev" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  REGISTRY: docker.io
  NGINX_IMAGE_NAME: beardedtek/newsfeed-nginx
  FRONTEND_IMAGE_NAME: beardedtek/newsfeed
  BACKEND_IMAGE_NAME: beardedtek/newsfeed-backend

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check commit message
        id: check
        run: |
          # Get the commit message
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, use the PR title
            COMMIT_MSG="${{ github.event.pull_request.title }}"
          else
            # For pushes, use the commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
          fi
          echo "Commit message: $COMMIT_MSG"
          
          # Check for skip phrases
          if echo "$COMMIT_MSG" | grep -qE 'NO_CICD|NO_CICD_DOCKER'; then
            echo "Skipping workflow due to commit message containing NO_CICD or NO_CICD_DOCKER"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "No skip phrase found, proceeding with workflow"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.NGINX_IMAGE_NAME }}
            ${{ env.FRONTEND_IMAGE_NAME }}
            ${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./nginx/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.NGINX_IMAGE_NAME }}:latest
            ${{ env.NGINX_IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.NGINX_IMAGE_NAME }}:${{ github.sha }}
      
      # Build and push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
      
      # Build and push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.BACKEND_IMAGE_NAME }}:${{ github.ref_name }}
            ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}